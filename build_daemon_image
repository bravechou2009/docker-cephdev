#!/bin/bash
#
# usage
#
#   build_daemon_image $root_folder $image_name $tag
set -e

function rm_container {
  docker stop dmn &> /dev/null || true
  docker rm -f dmn &> /dev/null || true
}

if [ ! -d $1 ] ; then
  echo "ERROR: expecting folder, got $1"
fi

if [ -z "$REBUILD_BASE" ] ; then
  REBUILD_BASE="false"
fi

parent_folder=`dirname $1`

if [ ! -d $parent_folder/install_base ] || [ $REBUILD_BASE = "yes" ] ; then
  echo "creating base folder to obtain deltas"
  rm -fr $parent_folder/install_base
  mkdir -p $parent_folder/install_base
  rsync -a $1 $parent_folder/install_base
  echo "creating base image $2-base:$3"
  rm_container
  docker run \
    --name dmn \
    --entrypoint=/bin/bash \
    -v $1:/install \
    ceph/daemon -c 'cp -r /install/* /'
  docker commit dmn $2-base:$3 &> /dev/null
  rm_container
  docker tag $2-base:$3 $2:$3
  echo "created image $2:$3"
  exit 0
fi

# get the delta
delta=`rsync -ani --out-format='%n' $1 $parent_folder/install_base`
if [ "$delta" = "" ]; then
  echo "Couldn't detect any files changed. Finishing"
  exit 0
fi
printf "creating image $2:$3 with new files: \n$delta\n"
delta=`echo $delta | tr '\n' ' '`
rm_container
docker run \
  --name dmn \
  --entrypoint=/bin/bash \
  -v $1:/install \
  $2-base:$3 -c "cd /install && cp --parents $delta /"
docker commit dmn $2:$3 &> /dev/null
rm_container
echo "created image $2:$3"
exit 0
